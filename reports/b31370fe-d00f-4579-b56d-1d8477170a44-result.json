{"name": "test_print_car_names[edge-BMW-BMW Cars]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[contains(text(),'Find New Cars')]\"}\n  (Session info: MicrosoftEdge=107.0.1418.56)\nStacktrace:\nBacktrace:\n\tMicrosoft::Applications::Events::EventProperties::SetProperty [0x00007FF7D17A8552+9986]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D1745D82+1445234]\n\tOrdinal0 [0x00007FF7D132FC8C+654476]\n\tOrdinal0 [0x00007FF7D13736C2+931522]\n\tOrdinal0 [0x00007FF7D1373B10+932624]\n\tOrdinal0 [0x00007FF7D13AFC17+1178647]\n\tOrdinal0 [0x00007FF7D1393BDF+1063903]\n\tOrdinal0 [0x00007FF7D1365FF4+876532]\n\tOrdinal0 [0x00007FF7D13ACF70+1167216]\n\tOrdinal0 [0x00007FF7D13939B3+1063347]\n\tOrdinal0 [0x00007FF7D136506A+872554]\n\tOrdinal0 [0x00007FF7D136402E+868398]\n\tOrdinal0 [0x00007FF7D136570F+874255]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D1606108+135416]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D15F02CF+45759]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D15F374C+59196]\n\tOrdinal0 [0x00007FF7D143B1F4+1749492]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D174B67A+1468010]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D174FF14+1486596]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D175006D+1486941]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D1757E2B+1519131]\n\tBaseThreadInitThunk [0x00007FFBD85074B4+20]\n\tRtlUserThreadStart [0x00007FFBD8B426A1+33]", "trace": "self = <testcases.test_carwalle.Test_Carwalle object at 0x0000019DF96FC910>, car_brand = 'BMW', car_title = 'BMW Cars'\n\n    @pytest.mark.parametrize('car_brand, car_title',\n                             dataProvider.get_data('CarTest'))\n    def test_print_car_names(self, car_brand, car_title):\n        log.logger.info('*** Inside Car Names Test ***')\n        home = HomePage(self.driver)\n    \n        car = CarBase(self.driver)\n        print('Car brand is ', car_brand)\n        if car_brand == 'Hyundai':\n            home.go_to_new_cars().select_hyundai()\n            title = car.get_car_title()\n            assert title == car_title, 'Not on the correct page as title is ' \\\n                                       'not matching '\n            car.get_car_name()\n        elif car_brand == 'BMW':\n>           home.go_to_new_cars().select_bmw()\n\ntest_carwalle.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\HomePage.py:12: in go_to_new_cars\n    self.click('findNewCars_XPATH')\n..\\pages\\BasePage.py:19: in click\n    self.driver.find_element(By.XPATH, configReader.read_config\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:861: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000019DF9199710>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...57E2B+1519131]\\\\n\\\\tBaseThreadInitThunk [0x00007FFBD85074B4+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFBD8B426A1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[contains(text(),'Find New Cars')]\"}\nE         (Session info: MicrosoftEdge=107.0.1418.56)\nE       Stacktrace:\nE       Backtrace:\nE       \tMicrosoft::Applications::Events::EventProperties::SetProperty [0x00007FF7D17A8552+9986]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D1745D82+1445234]\nE       \tOrdinal0 [0x00007FF7D132FC8C+654476]\nE       \tOrdinal0 [0x00007FF7D13736C2+931522]\nE       \tOrdinal0 [0x00007FF7D1373B10+932624]\nE       \tOrdinal0 [0x00007FF7D13AFC17+1178647]\nE       \tOrdinal0 [0x00007FF7D1393BDF+1063903]\nE       \tOrdinal0 [0x00007FF7D1365FF4+876532]\nE       \tOrdinal0 [0x00007FF7D13ACF70+1167216]\nE       \tOrdinal0 [0x00007FF7D13939B3+1063347]\nE       \tOrdinal0 [0x00007FF7D136506A+872554]\nE       \tOrdinal0 [0x00007FF7D136402E+868398]\nE       \tOrdinal0 [0x00007FF7D136570F+874255]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D1606108+135416]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D15F02CF+45759]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D15F374C+59196]\nE       \tOrdinal0 [0x00007FF7D143B1F4+1749492]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D174B67A+1468010]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D174FF14+1486596]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D175006D+1486941]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF7D1757E2B+1519131]\nE       \tBaseThreadInitThunk [0x00007FFBD85074B4+20]\nE       \tRtlUserThreadStart [0x00007FFBD8B426A1+33]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: NoSuchElementException"}, "attachments": [{"name": "log", "source": "1bc9801d-ab70-44b7-8e92-3dbab567ae37-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "831c9b6b-0d4b-443c-ae0b-479b61469872-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_browser", "value": "'edge'"}, {"name": "car_brand", "value": "'BMW'"}, {"name": "car_title", "value": "'BMW Cars'"}], "start": 1669738599956, "stop": 1669738619414, "uuid": "a69ab7a8-6bd7-4af7-84d1-7449331bd8ec", "historyId": "d86bf656a4a7118f20e1cde0c23c7040", "testCaseId": "4fe70e8bcf38876746cdd2264a63b458", "fullName": "test_carwalle.Test_Carwalle#test_print_car_names", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('log_on_failure', 'get_browser')"}, {"name": "suite", "value": "test_carwalle"}, {"name": "subSuite", "value": "Test_Carwalle"}, {"name": "host", "value": "CTNDELL131BKH3"}, {"name": "thread", "value": "17108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_carwalle"}]}